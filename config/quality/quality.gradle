/**
 * Set up Checkstyle, Findbugs and PMD to perform extensive code analysis.
 *
 * Gradle tasks added:
 * - checkstyle
 * - findbugs
 * - PMD
 *
 * The three tasks above are added as dependencies of the check task so running check will
 * run all of them.
 */
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle:6.19'
}

def qualityConfigDir = "$project.rootDir/config/quality";
def reportsDir = "$project.buildDir/reports"

check.dependsOn 'checkstyle', 'findbugs', 'pmd'
compileLint.dependsOn 'pmd'


task checkstyle(type: Checkstyle,
        group: 'Verification',
        description: 'Runs code style checks') {

    ignoreFailures = false
    configFile file("$qualityConfigDir/checkstyle/checkstyle-config.xml")
    classpath = files()
    source 'src'
    include '**/*.java'

    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            destination "$reportsDir/checkstyle/checkstyle.xml"
        }
        html {
            destination "$reportsDir/checkstyle/checkstyle.html"
        }
    }
}


task findbugs(type: FindBugs,
        group: 'Verification',
        description: 'Inspect java bytecode for bugs',
        dependsOn: ['compileDebugSources','compileReleaseSources']) {

    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("$qualityConfigDir/findbugs/exclude-filter.xml")
    classes = files("$project.rootDir/app/build/intermediates/classes")
    classpath = files()
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = false
        xml {
            destination "$reportsDir/findbugs/findbugs.xml"
        }
        html {
            destination "$reportsDir/findbugs/findbugs.html"
        }
    }
}


task pmd(type: Pmd,
        group: 'Verification',
        description: 'Source Code Analyzer for finding programming flaws'){

    ignoreFailures = false
    ruleSetFiles = files("$qualityConfigDir/pmd/pmd-ruleset.xml")
    ruleSets = []
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = true
        xml{
            destination "$reportsDir/pmd/pmd.xml"
        }
        html{
            destination "$reportsDir/pmd/pmd.html"
        }
    }
}